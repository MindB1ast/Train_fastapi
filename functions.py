# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VSbYh-vruOuWhbbS5mgbxhH3ql_f0mIS

Напишите функцию, которая конвертирует заданное булевое значение в строку. Например:
"""

from typing import List, Union


def tobool(a: bool) -> str:
    """Возращает строковое значение булевой переменной
>>> tobool(True)
'True'

>>> tobool(False)
'False'
  """
    return (str(a))


# tobool(True)


"""Дана строка. Напишите фунцию, которая возвращает строку в обратном порядке. Например:

"""


def antistr(a: str) -> str:
    """Возрощает строку в обратном порядке
  >>> antistr("abc")
  'cba'
  >>> antistr("qwerty")
  'ytrewq'
  """

    return a[::-1]


"""Дан массив целых чисел. Напишите функцию, которая возвращает сумму всех положительных значений. Если массив 
пустой, то сумма равна 0. Например: """


def sum(a: List[Union[int, float]]) -> float:
    """
  возвращает сумму всех положительных значений в массиве
  >>> sum([1,2,-1])
  3.0
  >>> sum([])
  0.0
  """
    s = 0
    for i in a:
        if i > 0:
            s += i
    return float(s)


"""Дано целое положительное число. Напишите функцию, которая выводит треугольник из символов *. Высота треугольника равна данному числу. Например: если число равно 5, то в консоль выводится:"""


def triangle(a: int) -> str:
    """
  Возращает строку в виде треугольника из * высотой в водимый аргумент
>>> triangle(5)
'    *\\n   ***\\n  *****\\n *******\\n*********\\n'

  """
    strq = ""
    for i in range(1, a + 1):
        strq += (" " * (a - i) + "*" * (i * 2 - 1)) + "\n"
    return strq


"""Дана строка. Напишите функцию, которая будет возвращать количество символов, которые встречаются в строке более одного раза. Регистр символов не учитывается. Например:
’abcde’ => 0 
’aabcde’ => 1
’aabBcde’ => 2
’aabbccde’ => 3
’indivisibilities’ => 2
"""


def counter(a: str) -> int:
    """
Возвращать количество символов, которые встречаются в строке более одного раза. Регистр символов не учитывается.
’abcde’ => 0 ’aabcde’ => 1 ’aabBcde’ => 2 ’aabbccde’ => 3 ’indivisibilities’ => 2
>>> counter("abcde")
0
>>> counter("aabBcde")
2
>>> counter("indivisibilities")
2
  """
    q = list(a.lower())
    counter = 0
    # print(q)
    for z in q:
        if (q.count(z) == 1):
            q[q.index(z)] = None
    newlist = []
    for i in q:
        if i not in newlist and i is not None:
            newlist.append(i)
            counter += 1

    return counter


"""Дана строка которая представлена в стиле camelCase. Напишите функцию которая преобразует данную строку в стиль kebab-case. Возвращаемая строка должна содержать только символы в нижнем регистре. Например:
’camelsHaveThreeHumps’ => ’camels-have-three-humps’
"""


def tokamel(a: str) -> str:
    """
  преобразует данную строку в стиль kebab-case. Возвращаемая строка возращает только символы в нижнем регистре
  >>> tokamel("camelsHaveThreeHumps")
  'camels-have-three-humps'
  """
    b = ""
    for i in a:
        if (i.isupper()):

            b = b + "-" + i.lower()
        else:
            b = b + i
    return b



"""
    Дано целое число. Напишите функцию, которая преобразует число в другое по следующему принципу:

1 -> 11 , т.е. одна еденица;
0 -> 10, т.е. один нуль;
21 -> 1211, т.е. одна двойка и одна еденица;
9000 -> 1930, т.е. одна девятка и три нуля;
222222222222 -> 122, т.е. двенадцать двоек.
"""


def convert(a: int) -> int:
    """
  преобразует число в другое по следующему принципу:
  1 -> 11 , т.е. одна еденица; 0 -> 10, т.е. один нуль; 21 -> 1211, т.е. одна двойка и одна еденица; 9000 -> 1930, т.е. одна девятка и три нуля; 222222222222 -> 122, т.е. двенадцать двоек.
  >>> convert(12332)
  232211
  >>> convert(9000)
  1930
  
  """
    a = str(a)
    b = [0 for i in range(10)]
    c = ""
    for i in range(10):
        b[i] = a.count(str(i))
    for i in reversed(range(10)):
        if (b[i] > 0):
            c = c + str(b[i]) + str(i)
    return int(c)


"""
    Дан массив целых чисел. Напишите функцию, которая сортирует все нечетные числа в массиве по возрастанию, при этом четные числа должны остаться на своих местах. Например:

[7, 8, 1] => [1, 8, 7]
[5, 8, 6, 3, 4]  =>  [3, 8, 6, 5, 4]
"""


def sorta(a: List[int]) -> List[int]:
    """
  сортирует все нечетные числа в массиве по возрастанию
  четные числа остаться на своих местах
>>> sorta([7, 8, 1])
[1, 8, 7]

>>> sorta([5, 8, 6, 3, 4])
[3, 8, 6, 5, 4]
  """
    b = []
    for i in range(len(a)):
        if (a[i] % 2 == 1):
            b.append(a[i])
            a[i] = None
        b.sort()
        b.reverse()
    for i in range(len(a)):
        if a[i] is None:
            a[i] = b.pop()
    return a


# print(sorta([5, 8, 6, 3, 4]))

"""С помощью модуля os создайте директорию lab_1. В данной директории создайте для каждого из заданий выше текстовые файлы: 1.txt, 2.txt, 3.txt и т.д.. В данные файлы выведите результаты выполнения функций по каждому заданию (по 2-3 случая)."""


class TestClass:
    def test_tobool_one(self):
        assert tobool(False) == "False"

    def test_tobool_two(self):
        assert tobool(True) == "True"

    def test_antist_one(self):
        assert antistr("qwe") == "ewq"

    def test_antist_two(self):
        assert antistr("") == ''

    def test_antist_three(self):
        assert antistr("abc321") == "123cba"

    def test_sum_one(self):
        assert sum([1, 2, 3, -1]) == 6

    def test_sum_two(self):
        assert sum([]) == 0

    def test_sum_three(self):
        assert sum([-1, -2, -3, -1]) == 0

    def test_triangle_one(self):
        assert triangle(4) == """   *\n  ***\n *****\n*******\n"""

    def test_counter_one(self):
        assert counter("abcde") == 0

    def test_counter_two(self):
        assert counter("qqwe") == 1

    def test_counter_three(self):
        assert counter("aabbccdd") == 4

    def test_tokamel_one(self):
        assert tokamel("camelsHaveThreeHumps") == 'camels-have-three-humps'

    def test_convert_one(self):
        assert convert("012332") == "23221110"

    def test_convert_two(self):
        assert convert("9000") == "1930"

    def test_convert_three(self):
        assert convert("0") == "10"

    def test_sorta_one(self):
        assert sorta([5, 8, 6, 3, 4]) == [3, 8, 6, 5, 4]

    def test_sorta_two(self):
        assert sorta([7, 8, 1]) == [1, 8, 7]


def main():
    import os
    if (os.path.exists("lab_1") == False):
        os.mkdir("lab_1")
        os.chdir(os.getcwd() + "/lab_1")

    my_file = open("1.txt", "w+")
    my_file.write(tobool(True) + "\n" + tobool(False))
    my_file.close()

    my_file = open("2.txt", "w+")
    my_file.write(antistr("abcde") + "\n" + antistr("123456"))
    my_file.close()

    my_file = open("3.txt", "w+")
    my_file.write(str(sum([1, 2, 3, 4, 5, -1, -2, -3, -4, -5])))
    my_file.close()

    # my_file = open("4.txt", "a")
    # my_file.write(triangle(5))
    # my_file.close()

    my_file = open("5.txt", "w+")
    my_file.write(str(counter("abcder")) + "\n" + str(counter("aaaaa")))
    my_file.close()

    my_file = open("6.txt", "w+")
    my_file.write(tokamel("camelsHaveThreeHumps"))
    my_file.close()

    my_file = open("7.txt", "w+")
    my_file.write(convert("012332"))
    my_file.close()

    my_file = open("8.txt", "w+")
    my_file.write(str(sorta([5, 8, 6, 3, 4])))
    my_file.close()


if __name__ == "__main__":
    main()
